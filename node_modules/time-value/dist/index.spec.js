"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require(".");
describe('Time', function () {
    describe('constructor', function () {
        test('should return empty instance', function () {
            var time = new _1.Time();
            expect(time.getHours()).toBe(0);
            expect(time.getMinutes()).toBe(0);
            expect(time.getSeconds()).toBe(0);
        });
        test('should return instance from hh:mm:ss', function () {
            var time1 = new _1.Time(4, 18, 25);
            expect(time1.getHours()).toBe(4);
            expect(time1.getMinutes()).toBe(18);
            expect(time1.getSeconds()).toBe(25);
        });
        test('should return instance from hh:mm', function () {
            var time1 = new _1.Time(4, 18);
            expect(time1.getHours()).toBe(4);
            expect(time1.getMinutes()).toBe(18);
            expect(time1.getSeconds()).toBe(0);
        });
        test('should overflow minutes', function () {
            var time1 = new _1.Time(4, 60);
            var time2 = new _1.Time(4, 75);
            expect(time1.getHours()).toBe(5);
            expect(time1.getMinutes()).toBe(0);
            expect(time1.getSeconds()).toBe(0);
            expect(time2.getHours()).toBe(5);
            expect(time2.getMinutes()).toBe(15);
            expect(time2.getSeconds()).toBe(0);
        });
        test('should overflow seconds', function () {
            var time1 = new _1.Time(4, 1, 60);
            var time2 = new _1.Time(4, 1, 75);
            var time3 = new _1.Time(4, 60, 60);
            var time4 = new _1.Time(4, 60, 75);
            expect(time1.getHours()).toBe(4);
            expect(time1.getMinutes()).toBe(2);
            expect(time1.getSeconds()).toBe(0);
            expect(time2.getHours()).toBe(4);
            expect(time2.getMinutes()).toBe(2);
            expect(time2.getSeconds()).toBe(15);
            expect(time3.getHours()).toBe(5);
            expect(time3.getMinutes()).toBe(1);
            expect(time3.getSeconds()).toBe(0);
            expect(time4.getHours()).toBe(5);
            expect(time4.getMinutes()).toBe(1);
            expect(time4.getSeconds()).toBe(15);
        });
    });
    describe('parse method', function () {
        test('should return instance from hh:mm:ss', function () {
            var time = _1.Time.parse('02:30:08');
            expect(time.getHours()).toBe(2);
            expect(time.getMinutes()).toBe(30);
            expect(time.getSeconds()).toBe(8);
        });
        test('should return instance from hh:mm', function () {
            var time = _1.Time.parse('02:30');
            expect(time.getHours()).toBe(2);
            expect(time.getMinutes()).toBe(30);
            expect(time.getSeconds()).toBe(0);
        });
        test('should return instance from -hh:mm:ss', function () {
            var time = _1.Time.parse('-02:30:08');
            expect(time.getHours()).toBe(-2);
            expect(time.getMinutes()).toBe(-30);
            expect(time.getSeconds()).toBe(-8);
        });
        test('should return instance from -hh:mm:ss', function () {
            var time = _1.Time.parse('-02:30');
            expect(time.getHours()).toBe(-2);
            expect(time.getMinutes()).toBe(-30);
            expect(time.getSeconds()).toBe(-0);
        });
        test('should throw error on invalid value', function () {
            expect(function () { return _1.Time.parse('invalid'); }).toThrow('Could not parse "invalid"');
        });
    });
    describe('sum method', function () {
        test('should sum values', function () {
            var time = _1.Time.sum(['05:45:11', '-03:08:02', '01:42:40']);
            expect(time.getHours()).toBe(4);
            expect(time.getMinutes()).toBe(19);
            expect(time.getSeconds()).toBe(49);
        });
        test('should sum values from hh:mm:ss', function () {
            var time = _1.Time.sum(['05:45:11', '03:08:02', '01:42:40']);
            expect(time.getHours()).toBe(10);
            expect(time.getMinutes()).toBe(35);
            expect(time.getSeconds()).toBe(53);
        });
        test('should sum values from -hh:mm:ss', function () {
            var time = _1.Time.sum(['-05:45:11', '-03:08:02', '-01:42:40']);
            expect(time.getHours()).toBe(-10);
            expect(time.getMinutes()).toBe(-35);
            expect(time.getSeconds()).toBe(-53);
        });
        test('should throw error on invalid value', function () {
            expect(function () { return _1.Time.sum(['05:45:11', 'invalid']); }).toThrow('Could not parse "invalid"');
        });
    });
    describe('add method', function () {
        test('should return new instance', function () {
            var time1 = new _1.Time();
            var time2 = new _1.Time();
            var time3 = time1.add(time2);
            expect(time3 === time1).toBe(false);
            expect(time3 === time2).toBe(false);
        });
        test('should add values', function () {
            var time1 = new _1.Time(3, 32, 15);
            var time2 = new _1.Time(2, 5, 10);
            var time3 = time1.add(time2);
            expect(time3.getHours()).toBe(5);
            expect(time3.getMinutes()).toBe(37);
            expect(time3.getSeconds()).toBe(25);
        });
    });
    describe('sub method', function () {
        test('should return new instance', function () {
            var time1 = new _1.Time();
            var time2 = new _1.Time();
            var time3 = time1.sub(time2);
            expect(time3 === time1).toBe(false);
            expect(time3 === time2).toBe(false);
        });
        test('should subtract values', function () {
            var time1 = new _1.Time(3, 32, 15);
            var time2 = new _1.Time(2, 5, 10);
            var time3 = time1.sub(time2);
            expect(time3.getHours()).toBe(1);
            expect(time3.getMinutes()).toBe(27);
            expect(time3.getSeconds()).toBe(5);
        });
    });
    describe('toString method', function () {
        test('should return formatted string', function () {
            var time1 = _1.Time.parse('01:25:13');
            var time2 = _1.Time.parse('02:45');
            var time3 = _1.Time.parse('-05:05:03');
            var time4 = _1.Time.parse('-09:50');
            expect(time1.toString()).toBe('01:25:13');
            expect(time2.toString()).toBe('02:45:00');
            expect(time3.toString()).toBe('-05:05:03');
            expect(time4.toString()).toBe('-09:50:00');
        });
    });
});
//# sourceMappingURL=index.spec.js.map