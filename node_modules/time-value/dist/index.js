"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Time = void 0;
/**
 * Represents an amount of time.
 */
var Time = /** @class */ (function () {
    function Time(hours, minutes, seconds) {
        if (hours === void 0) { hours = 0; }
        if (minutes === void 0) { minutes = 0; }
        if (seconds === void 0) { seconds = 0; }
        var isNegative = hours < 0 || minutes < 0 || seconds < 0;
        hours = Math.abs(hours);
        minutes = Math.abs(minutes);
        seconds = Math.abs(seconds);
        if (seconds >= 60) {
            minutes += Math.floor(seconds / 60);
            seconds %= 60;
        }
        if (minutes >= 60) {
            hours += Math.floor(minutes / 60);
            minutes %= 60;
        }
        if (isNegative) {
            hours = -hours;
            minutes = -minutes;
            seconds = -seconds;
        }
        this._hours = hours;
        this._minutes = minutes;
        this._seconds = seconds;
        this.isNegative = isNegative;
    }
    /**
     * Get hours.
     */
    Time.prototype.getHours = function () {
        return this._hours;
    };
    /**
     * Get minutes.
     */
    Time.prototype.getMinutes = function () {
        return this._minutes;
    };
    /**
     * Get seconds.
     */
    Time.prototype.getSeconds = function () {
        return this._seconds;
    };
    /**
     * Add a time value.
     *
     * @param value Time value to add.
     */
    Time.prototype.add = function (value) {
        var hours = this._hours + value._hours;
        var minutes = this._minutes + value._minutes;
        var seconds = this._seconds + value._seconds;
        return new Time(hours, minutes, seconds);
    };
    /**
     * Subtract a time value.
     *
     * @param value Time value to subtract.
     */
    Time.prototype.sub = function (value) {
        var hours = this._hours - value._hours;
        var minutes = this._minutes - value._minutes;
        var seconds = this._seconds - value._seconds;
        return new Time(hours, minutes, seconds);
    };
    /**
     * Format time as `hh:mm:ss`.
     */
    Time.prototype.toString = function () {
        var sign = this.isNegative ? '-' : '';
        var time = [this._hours, this._minutes, this._seconds]
            .map(function (x) { return Math.abs(x).toString().padStart(2, '0'); })
            .join(':');
        return sign + time;
    };
    /**
     * Parses a time string (`hh:mm:ss`) into it's parts.
     *
     * @param text String value.
     */
    Time._parse = function (text) {
        var isNegative = false;
        if (text.startsWith('-')) {
            isNegative = true;
            text = text.substring(1);
        }
        var parts = text.split(':');
        if (parts.length < 2 || parts.length > 3) {
            throw new Error("Could not parse \"" + text + "\"");
        }
        var hours = parseInt(parts[0]) || 0;
        var minutes = parseInt(parts[1]) || 0;
        var seconds = parseInt(parts[2]) || 0;
        if (isNegative) {
            hours = -hours;
            minutes = -minutes;
            seconds = -seconds;
        }
        return {
            hours: hours,
            minutes: minutes,
            seconds: seconds,
        };
    };
    /**
     * Parses a time string (`hh:mm:ss`) into an instance of Time.
     *
     * @param text String value.
     */
    Time.parse = function (text) {
        var _a = Time._parse(text), hours = _a.hours, minutes = _a.minutes, seconds = _a.seconds;
        return new Time(hours, minutes, seconds);
    };
    /**
     *Parse a collection of time strings (`hh:mm:ss`) and sum their values into one instance of Time.
     *
     * @param texts Collection of string values.
     */
    Time.sum = function (texts) {
        var hours = 0;
        var minutes = 0;
        var seconds = 0;
        texts.forEach(function (value) {
            var item = Time._parse(value);
            hours += item.hours;
            minutes += item.minutes;
            seconds += item.seconds;
        });
        return new Time(hours, minutes, seconds);
    };
    return Time;
}());
exports.Time = Time;
//# sourceMappingURL=index.js.map